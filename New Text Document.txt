1.Negetive of an image
clc;
clear all;
close all;
Image = imread('onion.png');
figure
subplot(121)
imshow(Image)
title('Image of Onion')
NegImg = 255-Image;
subplot(122)
imshow(NegImg);
title('Negetive Image of Onion')
imwrite(NegImg,'Negetive.png');

2.Bit plane Slicing
clc;
clear all;
close all;
I = imread('cameraman.tif');
ID = double(I);
p0 = mod(ID,2);
p1 = mod(bitshift(ID,-1),2);
p2 = mod(bitshift(ID,-2),2);
p3 = mod(bitshift(ID,-3),2);
p4 = mod(bitshift(ID,-4),2);
p5 = mod(bitshift(ID,-5),2);
p6 = mod(bitshift(ID,-6),2);
p7 = mod(bitshift(ID,-7),2);
figure
subplot(4,2,1)
imshow(p0)
title('Bit Plane 1')
subplot(4,2,2)
imshow(p1)
title('Bit Plane 2')
subplot(4,2,3)
imshow(p2)
title('Bit Plane 3')
subplot(4,2,4)
imshow(p3)
title('Bit Plane 4')
subplot(4,2,5)
imshow(p4)
title('Bit Plane 5')
subplot(4,2,6)
imshow(p5)
title('Bit Plane 6')
subplot(4,2,7)
imshow(p6)
title('Bit Plane 7')
subplot(4,2,8)
imshow(p7)
title('Bit Plane 8')




3.RGB to Gray to Monochrome
clc;
clear;
close;
I = imread('onion.png');
R = I(:,:,1);
G = I(:,:,2);
B = I(:,:,3);
Gray = R*0.2989+G*0.5870+B*0.1140;
Th = 128;
M = Gray>Th;
% M = imbinarize(Gray);
figure
subplot(311);
imshow(I)
title('RGB image');
subplot(312)
imshow(Gray);
title('Gray Scale Image');
subplot(313)
imshow(M);
title('B & W Image'

4.Add and Subtract
close all ;
clear ;
clc ;

image1 = imread('cameraman.tif') ;
image2 = imread('rice.png') ;

image_add = image1 + image2 ;
image_sub = image1 - image2 ;

subplot(221) ;
imshow(image1) ;
title('img_1') ;

subplot(222) ;
imshow(image2) ;
title('img_2') ;

subplot(223) ;
imshow(image_add) ;
title('Image Addition') ;

subplot(224) ;
imshow(image_sub) ;
title('Image Subtraction') ;

5. Write a program to see the effect of log transformation of an image.

close all ;
clear ;
clc ;

img = imread('cameraman.tif') ;
img = im2double(img) ;
c = 1 ;
out_img = c* log(1+img) ;

subplot(121) ;
imshow(img) ;
title('Original Image') ;

subplot(122) ;
imshow(out_img) ;
title('Log Transformation of Image') ;


6. Write a program to see the effect of power-law transformation of an image.

close all ;
clear ;
clc ;

img = imread('office_2.jpg') ;
img = im2double(img) ;
c = 1 ;
gamma = 0.2
out_img = c* (img.^gamma) ;

subplot(121) ;
imshow(img) ;
title('Original Image') ;

subplot(122) ;
imshow(out_img) ;
title('Power law of Image') ;

7.Write a program to draw a histogram of an image and histogram equalization.
close all ;
clear  ;
clc ; 

img = imread('cameraman.tif') ;

% Get size of image
[rows, cols] = size(img);

% Compute histogram
histogram = zeros(1,256);
for i = 1:rows
    for j = 1:cols
        % Get grayscale value of pixel
        gray_val = img(i,j);
        
        % Increment histogram bin
        histogram(gray_val+1) = histogram(gray_val+1) + 1;
    end
end

% Compute cumulative distribution function
cdf = cumsum(histogram) / (rows * cols);

% Map grayscale values to new values using CDF
new_gray_img = zeros(rows, cols);
for i = 1:rows
    for j = 1:cols
        % Get grayscale value of pixel
        gray_val = img(i,j);
        
        % Map grayscale value to new value using CDF
        new_gray_val = round(255 * cdf(gray_val+1));
        
        % Set new grayscale value in output image
        new_gray_img(i,j) = new_gray_val;
    end
end

new_gray_img = uint8(new_gray_img) ;

subplot(221) ;
imshow(img) ;
title('Original Image');

subplot(222) ;
imshow(new_gray_img) ;
title('Enhanced Image');

subplot(223) ;
imhist(img) ;

subplot(224) ;
imhist(new_gray_img) ;
8. Write a program for image zooming and shrinking.
clc;
close all;
clear ;

% Read image (Please change image path location)
original_image=imread('cameraman.tif');

%Convert to RGB
if size(original_image,3) == 3
original_image=rgb2gray(original_image);
end

%Extract Image size
[width,height] = size(original_image) ;

% Zooming factor( factor>1 for zooming and factor<1 for shrinking)
factor = 5 ;

%Getting new width and height
new_width = ceil(width*factor) ;
new_height = ceil(height*factor) ;

% Creating new Image
for i=1:new_width
    for j=1:new_height
        new_image(i,j) = original_image( ceil(i*width/new_width) , ceil(j*height/new_height) ) ;
    end
end 

imshow(original_image) ;
title('Original Image');

figure ;

imshow(new_image) ;
title('Resize Image');